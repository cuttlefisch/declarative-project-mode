* declarative-project-mode

A global minor mode for managing and installing a variety of project contents with a simple
declarative syntax in Emacs.

This global mode allows you to define a project as a conceptual grouping of software components,
and then manage and install these components with ease. The mode currently supports
installing git repositories as dependencies, and warning about missing required resources.

To use, enable the global ~declarative-project-mode~, and visit a Yaml file with the
following properties. When visiting the file, trigger
~declarative-project--install-project~.
- ~name~ :: The display name for the project to treemacs, etc.
- ~root-directory~ :: The directory into which all project dependencies are installed.
  Paths specified in the yaml spec are relative to ~root-directory~ for any install
  operations.
- ~agenda-files~ :: A list of files to add to ~org-agenda-files~. As these are processed
  *last*, installation only creates these files if they are not otherwise created. Any of
  these already present are just added to ~org-agenda-files~.
- ~required-resources~ :: A list of resources that must exist for the project to be
  considered complete.
- ~deps~ :: A list of git repositories to be cloned as dependencies.
- ~local-files~ :: A list of files to be copied from their current location to the project
  directory.
- ~symlinks~ :: List of link/target pairs to create as symlinks relative to the project
  directory.
- ~workspaces~ :: A list of workspace names this project should be added
  to. Currently only [[https://github.com/Alexander-Miller/treemacs][Treemacs]] workspaces are supported.

Note that any omitted ~dest~ or ~link~ field results in that resource's creation in the
project root directory, named as the specified source ~filename.extension~.

#+begin_src yaml :tangle /tmp/PROJECT.yaml
name: "Declarative Project Mode"
root-directory: "/tmp/demo-project"
agenda-files:
  - README.org
  - AGENDA.org
required-resources:
  - README.org
deps:
  - src: git@github.com:cuttlefisch/declarative-project-mode.git
    dest: DCM
  - src: git@github.com:cuttlefisch/declarative-project-mode.git
local-files:
  - src: ~/path/to/src
    dest: path/to/dest
    # (↑) path relative to project root dir
  - src: /path/to/src
    # (↑) default dest is project root dir
  - src: /path/to/README.org
    dest: README.org
symlinks:
  - targ: /path/to/link-target
    link: path/to/symlink
  - targ: ~/path/to/link-target
    # (↑) default link is project root dir
workspaces:
  - "Demos"
#+end_src

The mode can be activated by visiting a file in the project directory with the
PROJECT.yaml file or by running (declarative-project-mode 1) in the project directory.

* Noteworthy Features
** Decentralized Org Agenda Management
Specifying ~agenda-files~ results in those files' addition to ~org-agenda-files~ upon
project installation, and upon mode enablement. This mode caches the filepaths for any
installed projects, and checks the spec files at the specified file paths for their agenda
files. Any of them found are added to ~org-agenda-files~, and if
~declarative-project--persist-agenda-files~ then missing agenda files are recreated.

This allows users to specify any relevant agenda files as they define projects, and keep
this list current without additional overhead.

** Org-Babel Support
Install a project via org-babel by setting the src-block language to
~declarative-project~, and hitting ~Enter~ in the yaml block.

** Treemacs Workspace Assignment
Provided a list of treemacs workspaces, the installation process assigns this project to
each specified worksace. This should help decentralize workspace configuration, helping
construct conceptual groupings of projects regardless of their location in the filesystem.
** Locally Copy or Symlink Resources
It's often useful to maintain documentation in a form of knowlegebase such as Org Roam.
This approach allows us to maintain a declarative set of symlinks to connect a project to
the documentation, Rather than adapt the documentation & knowlege-building process to
conform to individual projects.

* Future Plans
- Support custom resource types & install methods
    - cloud storage backend
    - s3 backend
    - package managers
- Recursive project definitions, i.e. subprojects
