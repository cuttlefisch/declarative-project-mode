* declarative-project-mode

A minor mode for managing and installing a variety of project contents with a simple
declarative syntax in Emacs.

This mode allows you to define a project as a conceptual grouping of software components,
and then manage and install these components with ease. The mode currently supports
installing git repositories as dependencies, and warning about missing required resources.

To use the mode, create a file called PROJECT.yaml in the root of your project directory and
add a Yaml object with the following properties:
- required-resources: A list of resources that must exist for the project to be
  considered complete.
- deps: A list of git repositories to be cloned as dependencies.
- local-files: A list of files to be copied from their current location to the
  project directory.
- symlinks: List of link/target pairs to create as symlinks relative to the project
  directory.
- treemacs-workspaces: A list of Treemacs workspace names this project should be added to.

Note that any omitted ~dest~ or ~link~ field results in that resource's creation in the
project root directory, named as the ~Filename.extension~.

This project prefers Yaml.
#+begin_src yaml :tangle /tmp/PROJECT.yaml
project-name: "Declarative Project Mode"
root-dir: "/tmp/demo-project"
required-resources:
  - README.org
deps:
  - src: git@github.com:cuttlefisch/declarative-project-mode.git
    dest: DCM
  - src: git@github.com:cuttlefisch/declarative-project-mode.git
    args: "--branch some-branch-name"
    # (↑) use default dest for git clone
local-files:
  - src: ~/path/to/src
    dest: path/to/dest
    # (↑) path relative to project root dir
  - src: /path/to/src
    # (↑) default dest is project root dir
symlinks:
  - targ: /path/to/link-target
    link: path/to/symlink
  - targ: ~/path/to/link-target
    # (↑) default link is project root dir
treemacs-workspaces:
  - "Demos"
#+end_src

The mode can be activated by visiting a file in the project directory with the PROJECT.yaml
file or by running (declarative-project-mode 1) in the project directory.

*Install the project* by running "C-c C-c i" from the ~PROJECT.yaml~ file.

* Noteworthy Features
** Treemacs Workspace Assignment
Provided a list of treemacs workspaces, the installation process assigns this project to
each specified worksace. This should help decentralize workspace configuration,
helping construct conceptual groupings of projects regardless of their location in the
filesystem.

** Locally Copy or Symlink Resources
It's often useful to maintain documentation in a form of knowlegebase such as Org Roam.
This approach allows us to maintain a declarative set of symlinks to connect a project to
the documentation, Rather than adapt the documentation & knowlege-building process to
conform to individual projects.

* Future Plans
- Improving the minor-mode-specific quality, such as using proper custom variables and
  adding enable/disable behavior.
- Support custom scripts or commands with ~function~, ~args~ step
- Support custom resource types & install methods
    - cloud storage backend
    - s3 backend
    - package managers
- Improved startup/shutdown checks for workspaces
- Destination specification to help consolidate project definitions
- Recursive project definitions, i.e. subprojects
